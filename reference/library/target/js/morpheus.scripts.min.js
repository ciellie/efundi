/**
 * For inline Chat in Morpheus: 
 */
 $PBJQ('#footerAppPresence').on("click", function() {
 	$PBJQ('#presenceArea').toggleClass('is-hidden');
 });/**
 * For <details> support in FF and IE
 */

$PBJQ('details').details();/**
 * For Footer toggles in Morpheus
 */

/* Show server time on footer if container exists */
$PBJQ(document).ready(function(){
	
	updateFooterTime = (function(){
		if( $PBJQ('#preferredTime').length == 1 ){
			var preferredTzDisplay= $PBJQ('#preferredTime').data('preferredtzdisplay');
			var preferredServerDateAndGMTOffset = new Date( parseInt( $PBJQ('#preferredTime').data('preferredserverdateandgmtoffset') ) );
			var preferredLocalOffset = preferredServerDateAndGMTOffset.getTime() - (new Date()).getTime(); 	
		}
		var serverTzDisplay= $PBJQ('#serverTime').data('servertzdisplay');
		var serverDateAndGMTOffset = new Date( parseInt( $PBJQ('#serverTime').data('serverdateandgmtoffset') ) );
		var serverLocalOffset = serverDateAndGMTOffset.getTime() - (new Date()).getTime();

		return function() {
			var offsetDate = new Date((new Date()).getTime() + serverLocalOffset);
			var dateString = offsetDate.toUTCString()
					.replace(/GMT/, serverTzDisplay)
					.replace(/UTC/, serverTzDisplay);

			$PBJQ('#serverTime').text(dateString);
	
			if( $PBJQ('#preferredTime').length == 1 ){
				var offsetDate = new Date((new Date()).getTime() + preferredLocalOffset);
				var dateString = offsetDate.toUTCString()
						.replace(/GMT/, preferredTzDisplay)
						.replace(/UTC/, preferredTzDisplay);
	
				$PBJQ('#preferredTime').text(dateString);
			}
			
			setTimeout('updateFooterTime()', 1000);
		};

	})();

	if( $PBJQ('#serverTime').length == 1 ){
		updateFooterTime();
	}

});/**
 * For More Sites in Morpheus
 */

var dhtml_view_sites = function(){

  // first time through set up the DOM
  $PBJQ('#selectSiteModal').addClass('dhtml_more_tabs'); // move the selectSite in the DOM
  $PBJQ('.more-tab').position();

  // then recast the function to the post initialized state which will run from then on
  dhtml_view_sites = function(){

    var modal = $PBJQ('#selectSiteModal');
    
    modal.show();
    
    if (modal.hasClass('outscreen') ) {

      $PBJQ('body').toggleClass('active-more-sites');

      // Align with the bottom of the main header in desktop mode
      var allSitesButton = $PBJQ('.view-all-sites-btn:visible');

      var topPadding = 10;

      if (allSitesButton.length > 0) {
        // Raise the button to keep it visible over the modal overlay
        allSitesButton.css('z-index', 1005);

        var topPosition = allSitesButton.offset().top + allSitesButton.outerHeight() + topPadding;
        var rightPosition = $PBJQ('body').outerWidth() - (allSitesButton.offset().left + allSitesButton.outerWidth());
        if( $PBJQ('html').attr('dir') !== "rtl" ){
          modal.css('top', topPosition).css('right', rightPosition);
        }else{
          modal.css('top', topPosition).css('left', $PBJQ('body').outerWidth() - rightPosition );
        }
      }
      
      modal.toggleClass('outscreen');

      var paneHeight = $PBJQ(window).height();

      // Adjust for our offset from the top of the screen
      paneHeight -= $PBJQ('.tab-pane').offset().top;

      // and adjust to show the bottom of the modal frame
      paneHeight -= parseInt(modal.css('padding-bottom'), 10);

      $PBJQ('.tab-pane').css('max-height', paneHeight);


      $PBJQ('#txtSearch').focus();
      createDHTMLMask(dhtml_view_sites);

      $PBJQ('.selectedTab').bind('click', function(e){
        dhtml_view_sites();
        return false;
      });

      $PBJQ('.tab-pane:first').focus();

      $PBJQ(document).trigger('view-sites-shown');
    }
    else {
      // hide the dropdown
      $PBJQ('body').toggleClass('active-more-sites');
      $PBJQ('#selectSiteModal').toggleClass('outscreen'); //hide the box

      // Restore the button's zIndex so it doesn't hover over other overlays
      var allSitesButton = $PBJQ('.view-all-sites-btn');
      allSitesButton.css('z-index', 'auto');

      $PBJQ('#selectSite').attr('tabindex', '-1');
      removeDHTMLMask()
      $PBJQ('#otherSiteTools').remove();
      $PBJQ('.selectedTab').unbind('click');
    }
  }

  // finally run the inner function, first time through
  dhtml_view_sites();
}

function closeDrawer() {

  $PBJQ('#selectSiteModal').toggleClass('outscreen');  //hide the box
  removeDHTMLMask();
  $PBJQ('#selectSite').attr('tabindex', '-1');
  $PBJQ('#otherSiteTools').remove();
  $PBJQ('.selectedTab').unbind('click');
  $PBJQ('.moreSitesLink').unbind('keydown');
  $PBJQ('.more-tab a').focus();

}

function createDHTMLMask(callback){
  $PBJQ('body').append('<div id="portalMask">&nbsp;</div>');

  $PBJQ('#portalMask').css('height', browserSafeDocHeight()).css({
    'width': '100%',
    'z-index': 1000,
    'top': 0,
    'left': 0
  }).bind("click", function(event){
    callback();
    return false;
  });

  $PBJQ('#portalMask').bgiframe();
}

function removeDHTMLMask(){
  $PBJQ('#portalMask').remove();
}

/** Shows a drawer site tool dropdown **/
function showToolMenu(jqObj){
  var classId = jqObj.attr('id');
  // We need to escape special chars, like exclamations, or else $PBJQ selectors don't work.
  var id = classId.replace(/!/g,'\\!').replace(/~/g,'\\~');
  $PBJQ('.toolMenus').removeClass('toolMenusActive');

  if ($PBJQ('.' + id).length) {
    $PBJQ('#otherSiteTools').remove();
  } else {
    var subsubmenu_elt = $PBJQ('<ul id="otherSiteTools" role="menu" />').addClass(classId);
    var siteURL = '/direct/site/' + classId + '/pages.json';
    scroll(0, 0)
    var maxToolsInt = parseInt($PBJQ('#maxToolsInt').text());
    var maxToolsText = $PBJQ('#maxToolsText').text();

    var li_template = $PBJQ('<li class="otherSiteTool" >' +
                            '<span>' +
                            '<a role="menuitem"><span class="Mrphs-toolsNav__menuitem--icon"> </span></a>' +
                            '</span>' +
                            '</li>');

    var goToSite = li_template.clone();

    goToSite.find('a')
      .attr('href', portal.portalPath + '/site/' + classId)
      .attr('title', maxToolsText)
      .append(maxToolsText);

    goToSite.find('a span').addClass('icon-sakai--see-all-tools')

    $PBJQ.getJSON(siteURL, function(data){
      $PBJQ.each(data, function(i, item){

        if (!item.tools[0]) {
          // This item has a page with no tool.  Skip over it.
          return true;
        }

        if (i < maxToolsInt) {
          var li = li_template.clone();
          // Set the item URL and text
          li.find('a')
            .attr('href', item.tools[0].url)
            .attr('title', item.title)
            .append(item.title);

          // And its icon
          li.find('a span')
            .addClass('icon-' + item.tools[0].toolId.replace(/\./gi, '-'))
            .addClass('otherSiteToolIcon');

          if (item.toolpopup) {
            // For popups, we add an extra URL parameter and an onclick event
            li.find('a')
            .attr('href', item.tools[0].url + '?sakai.popup=yes')
            .attr('onclick', 'window.open(' + item.toolpopupurl + '); return false');
          }

          subsubmenu_elt.append(li);
        }
      });

      // If we couldn't show all the tools, offer a "go to site" link
      if (data.length > maxToolsInt) {
        subsubmenu_elt.append(goToSite.clone());
      }

      $PBJQ('#otherSiteTools').remove();
      jqObj.closest('li').append(subsubmenu_elt);

      jqObj.parent().find('.toolMenus').addClass("toolMenusActive");
    }); // end json call
  }
}

$PBJQ(document).ready(function(){

  if ($PBJQ('#eid').length === 1) {
    $PBJQ('#eid').focus()
  }

  // Open all Sites with mobile view
   $PBJQ(".js-toggle-sites-nav", "#skipNav").on("click", dhtml_view_sites);

  // Open all Sites with Desktop view
  $PBJQ("#show-all-sites, .view-all-sites-btn").on("click", dhtml_view_sites);

  // prepend site title to tool title
  // here as reminder to work on an actual breadcrumb integrated with neo style tool updates
  //var siteTitle = ($PBJQ('.nav-selected span:first').text())
  var siteTitle = portal.siteTitle;

  if (siteTitle) {

    if (portal.shortDescription) {
      siteTitle = siteTitle + " ("+portal.shortDescription+")"
    }

    $PBJQ('.portletTitle h2').prepend('<span class=\"siteTitle\">' + siteTitle + ':</span> ')
  }

  $PBJQ('#txtSearch').keyup(function(event){

    if (event.keyCode == 27) {
      resetSearch();
    }

    if ($PBJQ('#txtSearch').val().length > 0) {
      var queryString = $PBJQ('#txtSearch').val().toLowerCase();

      $PBJQ('.fav-sites-term, .fav-sites-entry').hide();

      var matched_sites = $PBJQ('.fav-sites-entry').filter(function (idx, entry) {
          return ($PBJQ('.fav-title a', entry).attr('title').toLowerCase().indexOf(queryString) >= 0);
      });

      matched_sites.show();
      matched_sites.closest('.fav-sites-term').show();
    }

    if ($PBJQ('#txtSearch').val().length == 0) {
      resetSearch();
    }

    // Should be <=1 if there is a header line
    if ($PBJQ('#otherSiteList li:visible').length < 1 && $PBJQ('.otherSitesCategorList li:visible').length < 1) {
      $PBJQ('.norecords').remove();
      $PBJQ('#noSearchResults').fadeIn('slow');
    }
  });

  function resetSearch(){
    $PBJQ('#txtSearch').val('');
    $PBJQ('.fav-sites-term, .fav-sites-entry').show();
    $PBJQ('#noSearchResults').hide();
    $PBJQ('#txtSearch').focus();
  }

  $PBJQ('#otherSiteSearchClear').on('click', function () {
      resetSearch();
  });

  //toggle presence panel
  $PBJQ("#presenceToggle").click(function(e){
    e.preventDefault();
    $PBJQ('#presenceArea').toggle();
  });

  //explicitly close presence panel
  $PBJQ('.trayPopupClose').click(function(e){
    e.preventDefault();
    $PBJQ(this).closest('.trayPopup').hide();
  });

  //bind directurl checkboxes
  if ( $PBJQ('a.tool-directurl').length ) $PBJQ('a.tool-directurl').cluetip({
    local: true,
    arrows: true,
    cluetipClass: 'jtip',
    sticky: true,
    cursor: 'pointer',
    activation: 'click',
    closePosition: 'title',
    closeText: '<img src="/library/image/silk/cross.png" alt="close">'
  });

});


$PBJQ(document).ready(function($){
  // The list of favorites currently stored
  var favoritesList = [];

  // True if we've finished fetching and displaying the initial list
  //
  // Used to ensure we don't inadvertently save an empty list of favorites if
  // the user gets in too quickly
  var favoritesLoaded = false;

  var container = $PBJQ('#selectSite');
  var favoritesPane = $PBJQ('#otherSitesCategorWrap');
  var organizePane = $PBJQ('#organizeFavorites');

  // Build up a map of siteid => list item.  Do this instead of an ID
  // selector to cope with Site IDs containing strange characters.
  var itemsBySiteId = {};
  $PBJQ('.site-favorite-btn', favoritesPane).each(function (i, e) {
    itemsBySiteId[$PBJQ(e).data('site-id')] = $PBJQ(e).parent();
  });

  var button_states = {
    favorite: {
      markup: '<i class="site-favorite-icon site-favorite"></i>'
    },
    nonfavorite: {
      markup: '<i class="site-favorite-icon site-nonfavorite"></i>'
    },
    myworkspace: {
      markup: '<i class="site-favorite-icon site-workspace site-favorite"></i>'
    }
  };

  var getUserFavorites = function (callback) {
    $PBJQ.ajax({
      url: '/portal/favorites/list',
      method: 'GET',
      dataType: 'text',
      success: function (data) {
        favoritesList = data.split(';').filter(function (e, i) {
          return e != '';
        });

        callback(favoritesList);
      }
    });
  };

  var setButton = function (btn, state) {
    var entry = button_states[state];

    $PBJQ(btn).data('favorite-state', state);

    if (state === 'favorite') {
      $PBJQ(btn).attr('title', $PBJQ('#removeFromFavoritesText').text());
    } else if (state === 'nonfavorite') {
      $PBJQ(btn).attr('title', $PBJQ('#addToFavoritesText').text());
    } else {
      $PBJQ(btn).attr('title', null);
    }

    $PBJQ(btn).empty().append($PBJQ(entry.markup));
  };

  var renderFavoriteCount = function () {
    var favoriteCount = $PBJQ('.site-favorite', favoritesPane).length;

    $PBJQ('.favoriteCount', container).text('(' + favoriteCount + ')');

    if (favoriteCount < 2) {
      $PBJQ('.organizeFavorites', container).addClass('tab-disabled');
    } else {
      $PBJQ('.organizeFavorites', container).removeClass('tab-disabled');
    }
  };

  var renderFavorites = function (favorites) {
    $PBJQ('.site-favorite-btn', favoritesPane).each(function (idx, btn) {
      var buttonSiteId = $PBJQ(btn).data('site-id');

      if ($PBJQ(btn).closest('.my-workspace').length > 0) {
        setButton(btn, 'myworkspace');
      } else {
        if ($PBJQ.inArray(buttonSiteId, favorites) >= 0) {
          setButton(btn, 'favorite');
        } else {
          setButton(btn, 'nonfavorite');
        }
      }
    });

    renderFavoriteCount();

    favoritesLoaded = true;
  };

  var listFavorites = function () {
    // Any favorite button with the 'site-favorite' class has been starred.
    return $PBJQ('.site-favorite-btn', favoritesPane).has('.site-favorite').map(function () {
      return $PBJQ(this).data('site-id');
    }).toArray();
  }

  var loadFromServer = function () {
    getUserFavorites(renderFavorites);
  }

  var showRefreshNotification = function () {
    if ($PBJQ('.moresites-refresh-notification').length > 0) {
      // Already got it
      return;
    }

    var notification = $PBJQ('<div class="moresites-refresh-notification" />')
        .html($PBJQ('#refreshNotificationText').html());

    $PBJQ("#loginLinks").prepend(notification);

    notification.css('top', ($PBJQ('.Mrphs-siteHierarchy').offset().top) + 'px');
  };

  var syncWithServer = function (onError) {
    if (!favoritesLoaded) {
      console.log("Can't update favorites as they haven't been loaded yet.");
      return;
    }

    if (!onError) {
      onError = function () {};
    }

    var newFavorites = listFavorites();

    // Retain the sort ordering of our original list, adding new items to the end
    newFavorites = newFavorites.sort(function (a, b) {
      if (favoritesList.indexOf(a) === -1) {
        return 1;
      } else if (favoritesList.indexOf(b) === -1) {
        return -1;
      } else {
        return favoritesList.indexOf(a) - favoritesList.indexOf(b);
      }
    });

    $PBJQ.ajax({
      url: '/portal/favorites/update',
      method: 'POST',
      data: {
        favorites: newFavorites.join(';')
      },
      error: onError
    });

    // Finally, update our stored list of favorites
    favoritesList = newFavorites;
    showRefreshNotification();
  };

  $PBJQ(favoritesPane).on('click', '.site-favorite-btn', function () {
    var self = this;

    var siteId = $PBJQ(self).data('site-id');
    var originalState = $PBJQ(self).data('favorite-state');

    if (originalState === 'myworkspace') {
      // No unfavoriting your workspace!
      return;
    }

    var newState;

    if (originalState === 'favorite') {
      newState = 'nonfavorite';
    } else {
      newState = 'favorite';
    }

    setButton(self, newState);
    renderFavoriteCount();

    syncWithServer(function () {
      // If anything goes wrong while saving, refresh from the server.
      loadFromServer();
    });
  });

  $PBJQ(container).on('click', '.tab-btn', function () {
    if ($PBJQ(this).hasClass('tab-disabled')) {
      return false;
    }

    $PBJQ('.tab-btn', container).removeClass('active');
    $PBJQ(this).addClass('active');

    var panel = $PBJQ(this).data('tab-target');

    $PBJQ('.tab-box').hide();
    $PBJQ(container).trigger('tab-shown', panel);
    $PBJQ('#' + panel).show();
  });

  $PBJQ(document).on('view-sites-shown', function () {
    loadFromServer();
  });

  $PBJQ(container).on('tab-shown', function (e, panelId) {
    if (panelId === 'organizeFavorites') {
      // Build our organize favorites screen based on the current set of
      // favorites
      var list = $PBJQ('#organizeFavoritesList');
      list.empty();

      // Collapse any visible tool menus
      $PBJQ('#otherSiteTools').remove();

      $PBJQ('#organizeFavoritesPurgatoryList').empty();

      $PBJQ.each(favoritesList, function (idx, siteid) {
        if (!itemsBySiteId[siteid]) {
          // Skip any favorite site that wasn't properly found for some reason
          // (this might happen if the user's favorites list contains sites that
          // they've had their access revoked from)
          return;
        }

        if ($PBJQ(itemsBySiteId[siteid]).hasClass('my-workspace')) {
          // Don't show an entry for the user's workspace since it can't be rearranged anyway.
          return;
        }

        var favoriteItem = itemsBySiteId[siteid].clone(false);

        favoriteItem.addClass('organize-favorite-item').data('site-id', siteid);
        var dragHandle = $PBJQ('<a href="javascript:void(0);" class="fav-drag-handle"><i class="fa fa-bars"></i></a>');

        // Hide the tool dropdown
        $PBJQ('.toolMenus', favoriteItem).remove();

        // Show a drag handle
        favoriteItem.append(dragHandle);

        list.append(favoriteItem);

        // Make sure the item is visible, just in case it was hidden on the other tab
        favoriteItem.show();
      });

      list.sortable({
        handle: ".fav-drag-handle",
        stop: function () {
          // Update our ordering based on the new selection
          favoritesList = list.find('.organize-favorite-item').map(function () {
            return $PBJQ(this).data('site-id');
          }).toArray();

          // and send it all to the server
          syncWithServer();
        }
      });

      list.disableSelection();
    }
  });

  $PBJQ(favoritesPane).on('click', '.toolMenus', function (e) {
    e.preventDefault();
    showToolMenu($PBJQ(this));
    return false;
  });

  $PBJQ(organizePane).on('click', '.site-favorite-btn', function () {
    var self = this;

    if ($PBJQ(self).closest('.my-workspace').length > 0) {
      // No unfavoriting your workspace!
      return;
    }

    var li = $PBJQ(self).parent();

    var buttonState;

    if ($PBJQ(self).closest('#organizeFavoritesList').length == 0) {
      // The clicked item was currently in "purgatory", having been unfavorited
      // in the process of organizing favorites.  This click will promote it
      // back to a favorite
      $PBJQ('#organizeFavoritesList').append(li);
      buttonState = 'favorite';
    } else {
      // This item has just been unfavorited.  To purgatory!
      $PBJQ('#organizeFavoritesPurgatoryList').append(li);
      buttonState = 'nonfavorite';
    }

    // Set the favorite state for both the entry under "Organize" and the
    // original entry under "Sites"
    setButton(self, buttonState);
    setButton(itemsBySiteId[$PBJQ(self).data('site-id')].find('.site-favorite-btn'),
              buttonState);

    renderFavoriteCount();

    syncWithServer(function () {
      // If anything goes wrong while saving, refresh from the server.
      loadFromServer();
    });
  });

  $PBJQ('.otherSitesMenuClose').on('click', function () {
    // Close the pane
    dhtml_view_sites();
  });

});
/*
 * Copyright (c) 2008-2012 The Sakai Foundation
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *             http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var profile = profile || {};

profile.requestFriend = function (requestorId, friendId) {

    $PBJQ.ajax( {
        url : "/direct/profile/" + requestorId + "/requestFriend?friendId=" + friendId,
        dataType : "text",
        cache: false } )
            .done(function (data, textStatus, jqXHR) {

                $PBJQ('#profile-popup-unconnected-block-' + friendId).hide();
                $PBJQ('#profile-popup-requested-block-' + friendId).show();
            });
    return false;
};

profile.confirmFriendRequest = function (requestorId, friendId) {

    $PBJQ.ajax( {
        url : "/direct/profile/" + requestorId + "/confirmFriendRequest?friendId=" + friendId,
        dataType : "text",
        cache: false })
            .done(function (data, textStatus, jqXHR) {

                $PBJQ('#profile-popup-incoming-block-' + friendId).hide();
                $PBJQ('#profile-popup-connected-block-' + friendId).show();
            });

    return false;
};

profile.removeFriend = function (removerId, friendId) {

    $PBJQ.ajax( {
        url : "/direct/profile/" + removerId + "/removeFriend?friendId=" + friendId,
        dataType : "text",
        cache: false })
            .done(function (data, textStatus, jqXHR) {

                $PBJQ('#profile-popup-connected-block-' + friendId).hide();
                $PBJQ('#profile-popup-unconnected-block-' + friendId).show();
            });

    return false;
};

profile.ignoreFriendRequest = function (removerId, friendId) {

    $PBJQ.ajax( {
        url : "/direct/profile/" + removerId + "/ignoreFriendRequest?friendId=" + friendId,
        dataType : "text",
        cache: false })
            .done(function (data, textStatus, jqXHR) {

                $PBJQ('#profile-popup-requested-block-' + friendId).hide();
                $PBJQ('#profile-popup-incoming-block-' + friendId).hide();
                $PBJQ('#profile-popup-unconnected-block-' + friendId).show();
            });

    return false;
};
/**
 * For Publishing sites in Morpheus
 */

function publishSite(siteId) { 

  var reqUrl = '/direct/site/'+siteId+"/edit"; 
  var resp = $PBJQ.ajax({ 
    type: 'POST', 
    data: 'published=true', 
    url: reqUrl, 
    success: function() { location.reload(); } 
  }).responseText; 

}
// * For Quick Links in Morpheus
// */

function quickLinksNavEscHandler(e){
  if (e.keyCode === 27) { // esc keycode
    toggleQuickLinksNav(e);
  }
}

function toggleQuickLinksNav(event){
  event.preventDefault();

  // Hide the user nav panel as necessary for mobile screen display
  if (!$PBJQ('.Mrphs-userNav__subnav').hasClass('is-hidden')) {
    toggleUserNav(event);
  }

  $PBJQ('.Mrphs-quickLinksNav__subnav').toggleClass('is-hidden');

  if (!$PBJQ('.Mrphs-quickLinksNav__subnav').hasClass('is-hidden')) {

    // Add an invisible overlay to allow clicks to close the dropdown
    var overlay = $PBJQ('<div class="quicklinks-dropdown-overlay" />');
    overlay.on('click', function (e) {toggleQuickLinksNav(e)});

    $PBJQ('body').prepend(overlay);

    // ESC key also closes it
    $PBJQ(document).on('keyup',quickLinksNavEscHandler);

  } else {
    $PBJQ('.quicklinks-dropdown-overlay').remove();
    $PBJQ(document).off('keyup',quickLinksNavEscHandler);
  }
}

$PBJQ('#quickLinks-close').on('click', toggleQuickLinksNav);
$PBJQ(".js-toggle-quick-links-nav").on("click", toggleQuickLinksNav);/**
 * For Responsive Menus in Morpheus: Adds classes to the <body>
 */

function toggleToolsNav(event){
  if (event) {
    event.preventDefault();
  }
    
  $PBJQ('body').toggleClass('toolsNav--displayed');
  if ($PBJQ('body').hasClass('toolsNav--displayed')) {
    /* Add the mask to grey out the top headers - re-use code in more.sites.js */
    createDHTMLMask(toggleToolsNav)
    // Set the height of the tools/subsites menu (depending on the tools nav position and any scrolling)
    // so that a scroll bar is added to the tools/subsites list if necessary.
    var toolsViewportPosition = $PBJQ('.js-toggle-tools-nav').offset().top - $(window).scrollTop();
    if (toolsViewportPosition < 0) {
      toolsViewportPosition = 0;
    }
    $PBJQ('#toolMenuWrap').css('height', $PBJQ(window).height() - toolsViewportPosition);
  }else{
    removeDHTMLMask();
  }
}

$PBJQ(document).ready(function(){
  $PBJQ('i.clickable', '#roleSwitch').click( function(){
    $PBJQ(this).next('select').toggleClass('active');
  });

  $PBJQ('#roleSwitchSelect').on("change", function(){

  	if( $PBJQ('option:selected', this ).text() !== '' ){
  		document.location = $PBJQ('option:selected', this ).val();
  	}else{
  		$PBJQ(this)[0].selectedIndex = 0;
  	}

  });

});

$PBJQ(".js-toggle-tools-nav", "#skipNav").on("click", toggleToolsNav);
/**
 * For Session and Timeouts in Morpheus
 */

//For SAK-13987
//For SAK-16162
//Just use the EB current.json as the session id rather than trying to do a search/replace
var sessionId = "current";
var sessionTimeOut;
var timeoutDialogEnabled = false;
var timeoutDialogWarningTime;
var timeoutLoggedoutUrl;
var timeoutPortalPath;

$PBJQ(document).ready(function(){

  // note a session exists whether the user is logged in or no
  if (portal.loggedIn && portal.timeoutDialog) {
    setTimeout('setup_timeout_config();', 60000);
  }

});

var setup_timeout_config = function(){

  timeoutDialogEnabled = portal.timeoutDialog.enabled;
  timeoutDialogWarningTime = portal.timeoutDialog.seconds;
  timeoutLoggedoutUrl = portal.loggedOutUrl;
  timeoutPortalPath = portal.portalPath;

  if (timeoutDialogEnabled == true) {

    poll_session_data();
    fetch_timeout_dialog();

  }

}

var poll_session_data = function(){

  //Need to append Date.getTime as sakai still uses jquery pre 1.2.1 which doesn't support the cache: false parameter.

  $PBJQ.ajax({
    url: "/direct/session/" + sessionId + ".json?auto=true&_=" + (new Date()).getTime(), //auto=true makes it not refresh the session lastaccessedtime
    dataType: "json",
    success: function(data){
      //get the maxInactiveInterval in the same ms
      data.maxInactiveInterval = data.maxInactiveInterval * 1000;

      if (data.active && data.userId != null &&
      data.lastAccessedTime + data.maxInactiveInterval >
      data.currentTime) {

        //User is logged in, so now determine how much time is left
        var remaining = data.lastAccessedTime + data.maxInactiveInterval - data.currentTime;

        //If time remaining is less than timeoutDialogWarningTime minutes, show/update dialog box
        if (remaining < timeoutDialogWarningTime * 1000) {

          //we are within 5 min now - show popup
          min = Math.round(remaining / (1000 * 60));
          show_timeout_alert(min);
          clearTimeout(sessionTimeOut);
          sessionTimeOut = setTimeout("poll_session_data()", 1000 * 60);

        } else {

          //more than timeoutDialogWarningTime min away
          clearTimeout(sessionTimeOut);
          sessionTimeOut = setTimeout("poll_session_data()", (remaining - timeoutDialogWarningTime * 1000));

        }
      } else if (data.userId == null) {
          // if data.userId is null, the session is done; redirect the user to logoutUrl
          location.href = timeoutLoggedoutUrl;
          
        } else {
          //the timeout length has occurred, but there is a slight delay, do this until there isn't a user.
          sessionTimeOut = setTimeout("poll_session_data()", 1000 * 10);
        }
    },
 
    error: function(XMLHttpRequest, status, error){
      // We used to to 404 handling here but now we should always get good session data.
    }

  });
}

function keep_session_alive(){
  dismiss_session_alert();
  $PBJQ.get(timeoutPortalPath);
}

var dismiss_session_alert = function(){
  removeDHTMLMask();
  $PBJQ("#timeout_alert_body").remove();
}

var timeoutDialogFragment;
function fetch_timeout_dialog(){
  $PBJQ.ajax({
    url: "/portal/timeout?auto=true",
    cache: true,
    dataType: "text",
    success: function(data){
      timeoutDialogFragment = data;
    },
    error: function(XMLHttpRequest, status, error){
      timeoutDialogEnabled = false;
    }
  });
}

function show_timeout_alert(min){
  if (!timeoutDialogEnabled) {
    return;
  }
  
  if (!$PBJQ("#portalMask").get(0)) {
    createDHTMLMask(dismiss_session_alert);
    $PBJQ("#portalMask").css("z-index", 1000);
  }
  if ($PBJQ("#timeout_alert_body").get(0)) {
    //its there, just update the min
    $PBJQ("#timeout_alert_body span").html(min);
  }
  else {
    var dialog = timeoutDialogFragment.replace("{0}", min);
    $PBJQ("body").append(dialog);
  }
}/**
 * For Short URL toggles in Morpheus
 */

//handles showing either the short url or the full url, depending on the state of the checkbox 
//(if configured, otherwise returns url as-is as according to the url shortening entity provder)
function toggleShortUrlOutput(defaultUrl, checkbox, textbox) {    
  
  if($PBJQ(checkbox).is(':checked')) {
    
    $PBJQ.ajax({
      url:'/direct/url/shorten?path='+encodeURI(defaultUrl),
      dataType: "text",
      success: function(shortUrl) {
        $PBJQ('.'+textbox).val(shortUrl);
      }
    }); 
  } else {
    $PBJQ('.'+textbox).val(defaultUrl);
  }
}

$PBJQ(document).ready(function(){
  $PBJQ('.Mrphs-toolTitleNav__link--directurl').click( function( e ){
    var origin = $PBJQ(this).position();
    $PBJQ(this).siblings('.Mrphs-directUrl').toggleClass('active').css( { 'left' : origin.left + 'px' } );
    e.preventDefault();
  });
  $PBJQ('.Mrphs-directUrl .dropDown_close').click( function( e ){
    $PBJQ(this).parent().toggleClass('active');
    e.preventDefault();
  });
});/**
 * For Skip Nav in Morpheus
 */

var setupSkipNav = function(){
  // function called from site.vm to enable skip links for all browsers
   $PBJQ('#skipNav a.Mrphs-skipNav__link').click(function(){
     var target = $PBJQ(this).attr('href');
    $PBJQ(target).attr('tabindex','-1').focus();
   });
};

$PBJQ( document ).ready(function() {
	
	var lastScrollTop = 0;

	$PBJQ(document).scroll(function(event){
	   var st = $PBJQ(this).scrollTop();
	   if (st > lastScrollTop && st > 90 ){
	   	   $PBJQ(".Mrphs-topHeader").addClass('moving');
	   	   $PBJQ(".Mrphs-siteHierarchy").addClass('moving');
	   	   $PBJQ(".Mrphs-toolsNav__title--current-site").addClass('moving');
	   	   $PBJQ(".Mrphs-skipNav__menu").addClass('moving');
	   	   $PBJQ(".Mrphs-sitesNav__menuitem--myworkspace").addClass('moving');
	   } else if( st > 90 ) {
	   	    $PBJQ(".Mrphs-topHeader").removeClass('moving');
	   	   	$PBJQ(".Mrphs-siteHierarchy").removeClass('moving');
	   	   	$PBJQ(".Mrphs-toolsNav__title--current-site").removeClass('moving');
	   	   	$PBJQ(".Mrphs-skipNav__menu").removeClass('moving');
	   	   	$PBJQ(".Mrphs-sitesNav__menuitem--myworkspace").removeClass('moving');
	   }
	   lastScrollTop = st;
	});

});/**
 * Sets up subnav on the sitenav
 */

var closeAllDropdownMenus = function() {
  $PBJQ('.Mrphs-sitesNav__menuitem').removeClass('dropdown-is-visible');
  $PBJQ('.Mrphs-sitesNav__menuitem').find('.is-visible').removeClass('is-visible');
  $PBJQ('.Mrphs-sitesNav__menuitem').find('.is-clicked').removeClass('is-clicked');

  $PBJQ('.sitenav-dropdown-overlay').remove();
};

var buildDropdownMenu = function(container, siteId, callback) {
  var navsubmenu = "<ul class=\"Mrphs-sitesNav__submenu\" role=\"menu\">";
  var maxToolsInt = parseInt($PBJQ('#linkNav').attr('data-max-tools-int'));
  var maxToolsText = $PBJQ('#linkNav').attr('data-max-tools-anchor');
  var goToSite = '<li class=\"Mrphs-sitesNav__submenuitem\"><a role=\"menuitem\" href=\"' + portal.portalPath + '/site/' + siteId + '\" title=\"' + maxToolsText + '\"><span class=\"toolMenuIcon icon-sakai--see-all-tools\"></span>' + maxToolsText + '</a></li>';
  var siteURL = '/direct/site/' + siteId + '/pages.json';
  var currentSite = window.location.pathname.split('/').pop();

  $PBJQ.ajax({
    url: siteURL,
    dataType: "json",
    success: function(data){

      $PBJQ.each(data, function(i, item) {

    	// Ignore the tool if is not available
    	if (!item.tools || item.tools.length<=0) return;
    	
        // Check to see if this is the current tool in the site
        var isCurrent = "";
        if (currentSite == item.tools[0].id) {
          isCurrent = " is-current";
        }

        if (i <= maxToolsInt) {
          var li_template;

          if (item.toolpopup) {
            var link_attrs = ' role="menuitem" href="{{tool_url}}?sakai.popup=yes" title="{{item_title}}" onclick="window.open(\'{{item_toolpopupurl}}\');"';
            li_template = '<li class="Mrphs-sitesNav__submenuitem" >' +
              '<a class="Mrphs-sitesNav__submenuitem-icon"' + link_attrs + '><span class="toolMenuIcon icon-sakai--{{icon}}"></span></a>' +
              '<a class="Mrphs-sitesNav__submenuitem-title"' + link_attrs + '>{{item_title}}</a>' +
              '</li>';
          } else {
            var link_attrs = ' role="menuitem" href="{{tool_url}}" title="{{item_title}}"';

            li_template = '<li class="Mrphs-sitesNav__submenuitem{{is_current}}">' +
              '<a class="Mrphs-sitesNav__submenuitem-icon"' + link_attrs + '><span class="toolMenuIcon icon-sakai--{{icon}}"></span></a>' +
              '<a class="Mrphs-sitesNav__submenuitem-title"' + link_attrs + '>{{item_title}}</a>' +
              '</li>';
          }

          navsubmenu += (li_template
                         .replace(/{{tool_url}}/g, item.tools[0].url)
                         .replace(/{{item_title}}/g, item.title)
                         .replace(/{{item_toolpopupurl}}/g, item.toolpopupurl)
                         .replace(/{{icon}}/g, item.tools[0].toolId.replace(/\./gi, '-'))
                         .replace(/{{is_current}}/g, isCurrent));
        }
      });

      if((data.length - 1) > maxToolsInt) {
        navsubmenu += goToSite
      }

      navsubmenu += "</ul>"

      navsubmenu = $PBJQ(navsubmenu);

      container.append(navsubmenu);

      addArrowNavAndDisableTabNav(navsubmenu);

      callback(navsubmenu);
    },

    error: function(XMLHttpRequest, status, error){
      // Something happened getting the tool list.
    }
  });
};


var setupSiteNav = function(){

  $PBJQ("ul.Mrphs-sitesNav__menu").each(function(){

    // Add an escape key handler to slide the page menu up
    $PBJQ(this).keydown(function(e) {
      if (e.keyCode == 27) {
        closeAllDropdownMenus();
      }
    });
  });

  $PBJQ(document).on('keydown', '.Mrphs-sitesNav__menu > li.Mrphs-sitesNav__menuitem > a',
                    function (e) {
                      if (e.keyCode == 40) {
                        // downarrow
                        e.preventDefault();
                        // Trigger click on the drop <span>, passing true to set focus on
                        // the first tool in the dropdown.
                        var dropdown = $PBJQ(this).parent().find(".Mrphs-sitesNav__dropdown");

                        if (dropdown.data('clicked')) {
                          // If the user has already triggered a click, give the
                          // AJAX a chance to finish.
                        } else {
                          dropdown.data('clicked', true);
                          dropdown.trigger('click', [true]);
                        }
                      } else if (e.keyCode == 27) {
                        // escape
                        e.preventDefault();
                        closeAllDropdownMenus();
                      }

                    });

  // focusFirstLink is only ever passed from the keydown handler. We
  // don't want to focus on click; it looks odd.
  $PBJQ("ul.Mrphs-sitesNav__menu li .Mrphs-sitesNav__dropdown").click(function(e, focusFirstLink) {
    e.preventDefault()

    var jqObjDrop = $PBJQ(e.target);
    var container = jqObjDrop.parent('.Mrphs-sitesNav__menuitem');

    var dropdownWasShown = container.hasClass('dropdown-is-visible');

    // Hide any currently shown menus so we don't end up with multiple dropdowns shown
    closeAllDropdownMenus();

    if (dropdownWasShown) {
      // We've hidden the dropdown now, so all done.
      return;
    }

    var dropdownArrow = $PBJQ(this);

    var displayDropdown = function (navsubmenu) {
      // Mark the dropdown arrow and the menu itself as clicked
      dropdownArrow.addClass("is-clicked");
      container.addClass('dropdown-is-visible');

      // now display the menu
      navsubmenu.addClass('is-visible');

      if(focusFirstLink) {
        container.find('a.Mrphs-sitesNav__submenuitem-title').first().focus();
      }

      // Add an invisible overlay to allow clicks to close the dropdown
      var overlay = $PBJQ('<div class="sitenav-dropdown-overlay" />');

      overlay.on('click', function (e) {
        closeAllDropdownMenus();
      });

      $PBJQ('body').prepend(overlay);

      dropdownArrow.removeData('clicked');
    };

    if (!container.find('ul').length) {
      // We haven't yet built the dropdown menu for this item.  Do that now.
      buildDropdownMenu(container, jqObjDrop.attr('data-site-id'), displayDropdown);
    } else {
      displayDropdown(container.find('ul'));
    }

  }).hover(function(){
    $PBJQ(this).toggleClass("Mrphs-sitesNav__dropdown--hover"); //On hover over, add
  });
}

/* Callback is a function and is called after sliding up ul */
function addArrowNavAndDisableTabNav(ul) {
  ul.find('li a').attr('tabindex','-1').keydown(function (e) {
    var obj = $PBJQ(e.target);
    if (e.keyCode == 40) {
      // Down arrow.  Move to the next item, or loop around if we're at the bottom.
      e.preventDefault();
      var next = obj.closest('li').next();

      if (next.length === 0 || next.find('a.Mrphs-sitesNav__submenuitem-title').length == 0) {
        // loop around
        next = ul.find('li').first();
      }

      next.find('a.Mrphs-sitesNav__submenuitem-title').focus();

    } else if (e.keyCode == 38) {
      // Up arrow.  Move to the previous item, or loop around if we're at the top.
      e.preventDefault();
      var prev = obj.closest('li').prev();

      if (prev.length === 0) {
        // jump to the bottom
        prev = ul.find('a.Mrphs-sitesNav__submenuitem-title').closest('ul')
      }

      prev.find('a.Mrphs-sitesNav__submenuitem-title').focus();

    } else if (e.keyCode == 9) { // Suck up the menu if tab is pressed
        closeAllDropdownMenus();
    }
  });
}
/**
* For toggling the Minimize and Maximize tools menu in Morpheus: Adds classes to the <body> and changes the label text for accessibility
*/

function toggleMinimizeNav(){

  $PBJQ('body').toggleClass('Mrphs-toolMenu-collapsed');

  var el = $PBJQ(this);
  var label = $PBJQ('.accessibility-btn-label' , el);

  el.toggleClass('min max');
  
  if (label.text() == el.data("title-expand") || collapsed) {
	document.cookie = "sakai_nav_minimized=false; path=/";
	collapsed = false;
	label.text(el.data("text-original"));
    el.attr('title', (el.data("text-original")));
    el.attr('aria-pressed', true);
  } else {
	document.cookie = "sakai_nav_minimized=true; path=/";
	collapsed = true;
	el.data("text-original", label.text());
    label.text(el.data("title-expand"));
    el.attr('title', (el.data("title-expand")));
    el.attr('aria-pressed', false);
  }
}

$PBJQ(".js-toggle-nav").on("click", toggleMinimizeNav);

var collapsed = false;

var $window = $PBJQ(window),
	$tools	= $("#toolMenu"),
	$bread = $(".Mrphs-siteHierarchy"),
	padding	= $bread.height() 
		+ getNumPart($bread.css('padding-top'))
		+ getNumPart($bread.css('padding-bottom'))
		+ $(".Mrphs-topHeader").height();

$PBJQ(document).ready(function(){
	if(getCookieVal('sakai_nav_minimized') === 'true') {
		$PBJQ(".js-toggle-nav").click();
		collapsed = true;
	}
});

$PBJQ(window).scroll(function(){
	if($("#toolMenuWrap").attr("scrollingToolbarEnabled") != undefined){
		var topPad = $(".pasystem-banner-alerts").height();
		var follow = ($window.height()- (padding + topPad)) > $tools.height() 
						&& ($window.scrollTop() > padding);
		if($("#toolMenuWrap").css('position') !== 'fixed'
			&& follow && $window.scrollTop() > 0) {
			$("#toolMenu,#subSites").stop().animate({
				top: $window.scrollTop() + topPad - padding
			});
		} else {
			$("#toolMenu,#subSites").stop().animate({
				top: 0
			});
		}
	}
});

//Shows or hides the subsites in a popout div. This isn't used unless
// portal.showSubsitesAsFlyout is set to true in sakai.properties.
$PBJQ("#toggleSubsitesLink").click(function (e) {
  var subsitesLink = $PBJQ(this);
  if($PBJQ('#subSites').css('display') == 'block') {
    $PBJQ('#subSites').hide();
    $PBJQ('#subSites').removeClass('floating');
  } else {
    var position = subsitesLink.position();
    var _top = ( -1 * ( $PBJQ('#toolMenu').height() - position.top ) );
    $PBJQ('#subSites').css({'display': 'block','left': position.left + subsitesLink.width() + 6 + 'px','top': _top + 'px'});
    $PBJQ('#subSites').addClass('floating');
  	if( $PBJQ("#toggleSubsitesLink").position().top < 240 ){
  		$PBJQ("#subSites.floating").addClass('ontop');
  	}
  }
});

function getCookieVal(cookieName) {
	var cks = document.cookie.split(';');
	for (var i = 0; i < cks.length; ++i) {
		var curCookie = (cks[i].substring(0,cks[i].indexOf('='))).trim();
		if(curCookie === cookieName) {
			return ((cks[i].split('='))[1]).trim();;
		}
	}
	return 'false';
}

function getNumPart(val) {
	for(var i = val.length - 1; i >= 0; i--) {
		if(!isNaN(Number(val.charAt(i)))) {
			return Number(val.substring(0,i+1));
		}
	}
}
/**
 * For Footer toggles in Morpheus
 */

function updatePresence(){

  $PBJQ.ajax({
    url: sakaiPresenceFragment,
    cache: false,
    success: function(frag){

      var whereul = frag.indexOf('<ul');
      if (whereul < 1) {
        $PBJQ("#presenceCount").html(' ');
        $PBJQ('#presenceCount').removeClass('present').addClass('empty');
        location.reload();
        return;
      }

      frag = frag.substr(whereul);
      var _s = frag;
      var _m = '<li'; // needle 
      var _c = 0;

      for (var i = 0; i < _s.length; i++) {
        if (_m == _s.substr(i, _m.length)) 
          _c++;
      }
      // No need to attrct attention you are alone

      if (_c > 1) {
        $PBJQ("#presenceCount").html(_c + '');
        $PBJQ('#presenceCount').removeClass('empty').addClass('present');
      }

      else 

        if (_c == 1) {
          $PBJQ("#presenceCount").html(_c + '');
          $PBJQ('#presenceCount').removeClass('present').addClass('empty');
        }

        else {
          $PBJQ("#presenceCount").html(' ');
          $PBJQ('#presenceCount').removeClass('present').addClass('empty');
        }

      $PBJQ("#presenceIframe").html(frag);

      var chatUrl = $PBJQ('.nav-selected .icon-sakai-chat').attr('href');

      $PBJQ('#presenceIframe .presenceList li.inChat span').wrap('<a href="' + chatUrl + '"></a>')
      sakaiLastPresenceTimeOut = setTimeout('updatePresence()', 30000);
    },

    // If we get an error, wait 60 seconds before retry
    error: function(request, strError){
      sakaiLastPresenceTimeOut = setTimeout('updatePresence()', 60000);
    }
  });
}/**
 * ESC handler to dismiss user nav
 */

function userNavEscHandler(e){
  if (e.keyCode === 27) { // esc keycode
    toggleUserNav(e);
  }
}

/**
 * Toggle user nav in header: 
 */

function toggleUserNav(event){
  event.preventDefault();
  $PBJQ('.Mrphs-userNav__subnav').toggleClass('is-hidden');

  if (!$PBJQ('.Mrphs-userNav__subnav').hasClass('is-hidden')) {
    // Add an invisible overlay to allow clicks to close the dropdown

    var overlay = $PBJQ('<div class="user-dropdown-overlay" />');
    overlay.on('click', function (e) {toggleUserNav(e)});

    $PBJQ('body').prepend(overlay);

    // ESC key also closes it
    $PBJQ(document).on('keyup',userNavEscHandler);

  } else {
    $PBJQ('.user-dropdown-overlay').remove();
    $PBJQ(document).off('keyup',userNavEscHandler);    
  }
}

 // Logout Confirm
  $PBJQ('#loginLink1').click(function(e){
    if ($PBJQ(this).attr("data-warning") !== "" && !confirm($PBJQ(this).attr("data-warning"))){
	e.preventDefault();
    }
  });


$PBJQ(".js-toggle-user-nav a#loginUser > .Mrphs-userNav__drop-btn", "#loginLinks").on("click", toggleUserNav);
$PBJQ(".js-toggle-user-nav .Mrphs-userNav__drop-btn", "#loginLinks").on("click", toggleUserNav);

$PBJQ(document).ready( function(){
  if( $PBJQ('.Mrphs-hierarchy--parent-sites').length > 0 && $PBJQ(window).width() <= 800 ){
    $PBJQ('#content').css( 'margin-top', ( parseInt( $PBJQ('#content').css('margin-top').replace('px', '') ) +  $PBJQ('.Mrphs-hierarchy--parent-sites').outerHeight(true) ) + 'px' );
  }
});

/**
 * Miscellaneous Utils
 */

function f_scrollTop(){
    return f_filterResults(window.pageYOffset ? window.pageYOffset : 0, document.documentElement ? document.documentElement.scrollTop : 0, document.body ? document.body.scrollTop : 0);
}

function f_filterResults(n_win, n_docel, n_body){
    var n_result = n_win ? n_win : 0;
    if (n_docel && (!n_result || (n_result > n_docel))) 
        n_result = n_docel;
    return n_body && (!n_result || (n_result > n_body)) ? n_body : n_result;
}

$PBJQ(document).ready(function(){
	$PBJQ('input, textarea', '#content').each( function(){
		if( $PBJQ(this).prop('disabled') ){
			$PBJQ(this).parent('label').addClass('disabled');
		}
	});
	
// SAK-29494: Escape key maps to keycode `27`
	$PBJQ(document).keyup(function(e) {
		if (e.keyCode == 27) {
			
			//Close More Sites
			if (!$PBJQ('#selectSiteModal').hasClass('outscreen') ){
				$PBJQ('#otherSitesMenu .otherSitesMenuClose').trigger('click');
			}
			
			//Close DirectUrl dialogs
			$PBJQ('.Mrphs-directUrl__dropDown').each(function(){
				if($PBJQ(this).hasClass('active')){
					$PBJQ(this).find('.dropDown_close').trigger('click');
				}
			});
			
			//Close Icon Selector in customization of Web Contents
			$PBJQ('.fip-icon-up-dir').trigger('click');				
			
			//Close All sites dialog in Resources
			$PBJQ('.navigatePanelControls .close').trigger('click');
		}
	});
});/* XLogin over portal body */

$PBJQ(document).ready(function(){

  if( $PBJQ('#loginLink2').length == 1 ){

    $PBJQ('#loginLink2').click( function( e ){

      $PBJQ('body').append('<div id="Mrphs-xlogin-container" />');
      $PBJQ('#Mrphs-xlogin-container').load('/portal/xlogin #Mrphs-xlogin',function(){
        $PBJQ('#Mrphs-xlogin-container').addClass('loaded');
        $PBJQ('#Mrphs-xlogin').addClass('loadedByAjax');
        $PBJQ('#eid').focus();
      });
      $PBJQ('.Mrphs-portalWrapper').addClass('blurry');

      $PBJQ('body').append('<div id="loginPortalMask" />');
      $PBJQ('#loginPortalMask').bgiframe();
      
      $PBJQ('#loginPortalMask').click(function(){
        $PBJQ('#loginPortalMask').remove();
        $PBJQ('#Mrphs-xlogin-container').remove();
        $PBJQ('.Mrphs-portalWrapper').removeClass('blurry');
      });

      e.preventDefault();

    });
  }

});